## create virtual env
cd securityCam/server
python -m venv VENV_CAM
activate venv (os dependent)
pip install -r requirement.txt

# project should be working if ip of the cam is accessible
# dont forget to set enough buffer size in main.py
python main.py

## Project can be deployed with nginx and gunicorn. 

# cached imgs are problem with nginx. 
# here is a example nginx conf file that solves caching problem
cat /etc/nginx/sites-available/cam.hesimsek.com
server {
    listen 80;
    server_name cam.hesimsek.com www.cam.hesimsek.com;

    location / {
        include proxy_params;
        proxy_pass http://unix:/run/cam.gunicorn.sock;
        proxy_buffering off;
        proxy_request_buffering off;
        proxy_socket_keepalive on;
        proxy_redirect off;
        add_header Last-Modified $date_gmt;
        add_header Cache-Control 'no-store, no-cache';
        if_modified_since off;
        expires off;
        etag off;
    }
}


# my flask server has multiple client support but it causes fps drop. 
# later, maybe i'll use/write another mjpeg stream lib instead of py-mjpeg
# gunicorn duplicates flask instances for each worker. And my code has a global jpg producer (mjpeg-client).
# Becase this global object is duplicated by wsgi, mjpeg-client will be duplicated as well.
# This means for each video stream, a socket will be opened to esp32 that cannot handle.
# wsgi should be configured not to duplicate flask instances.
# --workers 1 will create only one instance. --threads will create threads that shares the global object.
# thread number will limit the maximum allowed user at a time, because every streaming(x-mixed-replace makes busy) blocks a thread.

cat /etc/systemd/system/cam.gunicorn.service
[Unit]
Description=gunicorn daemon for cam
Requires=cam.gunicorn.socket
After=network.target

[Service]
User=root
Group=www-data
WorkingDirectory=/var/www/cam.hesimsek.com/securityCam/server
ExecStart=/var/www/cam.hesimsek.com/securityCam/server/VENV_CAM/bin/gunicorn \
          --access-logfile - \
          --workers 1 \
          --threads 5 \
          --worker-class=gthread \
          --bind unix:/run/cam.gunicorn.sock \
          --timeout 600 \
          wsgi:app

[Install]
WantedBy=multi-user.target

# socket example
cat /etc/systemd/system/cam.gunicorn.socket
[Unit]
Description=gunicorn socket for cam

[Socket]
ListenStream=/run/cam.gunicorn.sock

[Install]
WantedBy=sockets.target

sudo systemctl start cam.gunicorn.socket
sudo systemctl enable cam.gunicorn.socket
sudo systemctl status cam.gunicorn.socket # should be active
file /run/cam.gunicorn.sock # output: /run/cam.gunicorn.sock: socket
sudo journalctl -u cam.gunicorn.socket # if fails, how to see logs

sudo systemctl stop cam.gunicorn.socket # to stop if necessary (because it is automatically trigger gunicorn)
# restarting cam.gunicorn.socket causes django server to be restart

# if /etc/systemd/system/gunicorn.service changes, run these to restart
sudo systemctl daemon-reload
sudo systemctl restart gunicorn

